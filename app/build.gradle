apply plugin: 'com.android.application'
apply from: '../jacoco.gradle'

project.ext.KEYSTORE_PASSWORD = project.hasProperty("pass") ? "$pass" : '' //usage: ./gradlew installRelease -Ppass=...

android {
    compileSdkVersion 27
    buildToolsVersion "26.0.2"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "zlotindaniel.memorize"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 4
        versionName "1.1.0"

        resConfigs "auto"

        testInstrumentationRunner "zlotindaniel.memorize.MemorizeE2ETestRunner"
    }
    signingConfigs {
        release {
            storeFile file('../../zlotindaniel.keystore')
            keyAlias 'daniel zlotin'
            storePassword KEYSTORE_PASSWORD
            keyPassword KEYSTORE_PASSWORD
        }
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    testOptions {
        unitTests.all { t ->
            reports {
                html.enabled true
            }
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
            }
            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "      ${result.resultType} (${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)     "
                    def repeatLength = output.length()
                    println '\n\n' + ('-' * repeatLength) + '\n' + output + '\n' + ('-' * repeatLength) + '\n'

                    println "see report at file://${t.reports.html.destination}/index.html"
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:support-annotations:27.0.1'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    implementation 'com.google.android.gms:play-services-auth:11.4.2'
    implementation 'com.google.firebase:firebase-core:11.4.2'
    implementation 'com.google.firebase:firebase-database:11.4.2'
    implementation 'com.firebaseui:firebase-ui-auth:3.1.0'

    implementation 'com.google.guava:guava:23.1-android'

    // unit tests
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.assertj:assertj-core:2.8.0'
    testImplementation 'org.mockito:mockito-core:2.12.0'
    testImplementation 'org.json:json:20140107'

    // e2e
    androidTestImplementation 'com.android.support:support-annotations:27.0.1'
    androidTestImplementation 'org.assertj:assertj-core:2.8.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test:rules:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'
}

task unit(dependsOn: 'testDebugUnitTestCoverage') { mustRunAfter 'clean' }
task e2e(dependsOn: 'connectedDebugAndroidTest') { mustRunAfter 'unit' }
task all(dependsOn: ['clean', 'unit', 'e2e']) {}

task start(dependsOn: 'installDebug', type: Exec) {
    def cmd = "adb shell monkey -p ${android.defaultConfig.applicationId} 1"
    commandLine cmd.split(" ")
}

apply plugin: 'com.google.gms.google-services'
